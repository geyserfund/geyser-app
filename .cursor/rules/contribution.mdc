---
description: Writing code and helping in the development process.
globs: *
alwaysApply: false
---
You are an expert in TypeScript, Node.js, React, Vite, Apollo Graphql Client, React Router, and ChakraUI.

Response Constraints
- Do not remove any existing code unless necessary.
- Do not remove my comments or commented-out code unless necessary.
- Do not change the formatting of my imports.
- Do not change the formatting of my code unless important for new functionality.

Code Style and Structure
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.

## Internationalization (i18n)
- Always use the t() function from react-i18next for all user-facing strings.
- Import the t() function directly for i18next integration
- Never hardcode user-facing text strings; wrap all strings with t() function.
- Keep the translations keys simple and descriptive, matching the English text.
- Wrap all user-facing text in t() function calls, even for button labels and titles
- When displaying app values like currencies or numbers, place them outside the t() function

## Colour Palette
- Only use colours from our colour palette, defined in [palette.ts](mdc:src/shared/styles/palette.ts)

## Dark/Light Mode
- Prefer the use of the React `useColorModeValue` hook instead of string comparison when dynamically rendering based on dark or light mode.

Importing from files
- While importing from another file, favour the shortest route, i.e relative if it is short, else absolute if that is shortest.
- Absolute routes start with "@" which is the same as "src/"
- Always add the extension of the file that a component or function is imported from, for example: "@/api/airtable.ts"

Export Conventions
- Always favour named exports over default exports.

Component uses
- Favour use of the components in the `src/shared/components` folder for when an existing component could be used.

Typography Components
- Use the typography components (Body, H3, etc.) from the shared components directory for all text elements.
- When styling typography components, use the component's props (size, bold, etc.) rather than wrapping with styled components.
- For Body components, use size="sm", "md", or "lg" props instead of fontSize prop directly.

Naming Conventions
- For component names, use Capitalized words.
- Use camel case for directories, variables, constants, functions, etc. 
- Favor named exports for components.

TypeScript Usage
- Use TypeScript for all interfaces over types.
- Avoid enums; use maps instead.
-  If a type is already defined in the file, don't redefine it. Instead, focus on adding new types that are needed.
- Preserve Type Structure: We shouin the original type structures unless there's a specific reason to change them.
- Prefer "type" declarations over "interface" declaration.
- Look at [graphql.ts](mdc:src/types/generated/graphql.ts) for all the type knowledge. Do not suggest auto-complete with keys that don't exist.

Syntax and Formatting
- Use the "const" keyword for declaring any and all functions.
- Use curly braces for all conditionals. Favor simplicity over cleverness.
- Use declarative JSX.

UI and Styling
- Use charkaUI for components and styling, check [package.json](mdc:package.json) for which version we're currently on.
- Never use any HTML tags, unless not available in chakra stack.
- Favour using the components props to pass in style configuration to chakra components.
- Go through [theme.ts](mdc:src/config/theme/theme.ts) and all the theme component it exports to know more about the variants. Specially when building something based off a wireframe or design image.
- For icon components, use "as" prop to specify the icon component: <Icon as={IconComponent} />
- For all icons only use the 'react-icons/pi' package.
- Nest components in a consistent way: HStack/VStack containing related elements, properly grouped.

Performance Optimization
- Look for ways to make things faster:
  - Use immutable data structures
  - Use efficient data fetching strategies
  - Optimize network requests
  - Use efficient data structures
  - Use efficient algorithms
  - Use efficient rendering strategies
  - Use efficient state management

# Component Creation Rules:

## Import Specificity
- Import components with their full file path including extension (e.g., '@/shared/components/typography/Body.tsx')
- Import the prop types from the base component when extending functionality

## Props Management
- When creating wrapper components, reuse the prop types from the base component instead of creating custom types
- Use `ComponentProps` pattern instead of creating custom interfaces when possible
- Pass all props to the underlying component using spread operator (`{...props}`)

## Export Conventions
- Use named exports only (avoid default exports)
- Keep export statements simple and avoid redundant exports

## Component Documentation
- Add a simple JSDoc comment above the component explaining its purpose
- Keep documentation concise and focused on what the component does

## Component Structure
- Maintain the same styling properties (like 'light' and 'size') as found in the original usage
- Position the cursor inside the component's content area to facilitate adding content
- Use nested VStack/HStack components to group related elements
- For cards and sections, use CardLayout for consistency
- Place custom or external hooks at the top of the function body
- Prefer the use of components in [Heading.tsx](mdc:src/shared/components/typography/Heading.tsx) for titles, sub-titles, etc.

## General Conventions
- Minimal Code Changes: When adding types, we should focus only on the type definitions unless specifically asked to modify the implementation.
- Code Block Format: When showing edits, I should have used a more focused format. Using anything reusable in the file or other files.
  
## Currency Conversions

- For currency conversions make sure to use the `@/shared/utils/hooks/useCurrencyFormatter` hook.

## Toast Notifications

- Make sure to use the useNotification hook from [Notification.tsx](mdc:src/utils/tools/Notification.tsx) when creating toast notifications.
- Do not import individual toast calls, import toast as an object and use toast.success, toast.error, etc.

## Table Components

- Make use of [TableWithAccordion.tsx](mdc:src/modules/project/pages1/projectDashboard/common/TableWithAccordion.tsx)

## Form Components

- Make use of custom components in `src/shared/components/controlledInput`

# Comment Formatting Rule

## Single-Line Comments
- Use single-line TypeScript JSDoc comments for most documentation:
  - Correct: `/** Helper function to get contribution date for sorting */`
  - Incorrect: 
    ```
    /**
     * Helper function to get contribution date for sorting
     */
    ```

## Multi-Line Comments
- Only use multi-line comments when absolutely necessary (e.g., complex explanations, param documentation)
- For simple function/method descriptions, always use the single-line format

## Formatting
- Start with `/** ` (note the space after the asterisks)
- End with ` */` (note the space before the asterisks)
- For function descriptions, use the format: `/** [Function name]: does this */` or `/** [Purpose description] */`

## Linting
- Consider adding an ESLint rule to enforce this comment style across the codebase
- Make sure to auto-remove any unused imported files