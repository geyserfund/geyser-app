---
description: 
globs: src/**/graphql/**/*,src/types/generated/graphql.ts
alwaysApply: false
---
---
description: 
globs: src/**/graphql/**/*,src/types/generated/graphql.ts
alwaysApply: false
---

# GraphQL Workflow Rules

## 1. Definition File Structure & Content
- Place GraphQL operation definitions (queries, mutations, subscriptions) in appropriately named files within the relevant feature module's `graphql/[queries|mutations|subscriptions]` directory (e.g., `src/modules/profile/graphql/mutations/userTaxProfileUpdate.ts`).
- These definition files should **only** contain the `gql` tag definition for the specific operation.
- These files **may** import and use fragments defined locally within the feature's `graphql/fragments` directory (see Rule 4).
- **Do not** export auto-generated hooks (like `useMyMutation`) or unrelated types from these definition files. Their sole purpose is to define the GraphQL operation string.

## 2. Constructing Operations
- When writing the `gql` definition, refer to the main generated types file (`@/types/generated/graphql.ts` or similar) to find the correct names for mutations, queries, input objects, and fields available in the schema.

## 3. Using Hooks
- When you need to **execute** a query or mutation (e.g., in a component or a custom hook), **always import the corresponding auto-generated hook directly from the main generated types file (`@/types/index.ts` or similar)**.
- **Do not** import hooks from the `graphql/[queries|mutations|...]` definition files created in Rule 1.
- **Do not** call the base Apollo hooks (`useQuery`, `useMutation`) directly. Always use the hooks generated by GraphQL Code Generator.

## 4. Using Fragments
- Define reusable field sets as fragments in the relevant `graphql/fragments` directory within your feature module (e.g., `src/modules/profile/graphql/fragments/userFragment.ts`). Use clear, descriptive names prefixed with `FRAGMENT_`.
- Import these fragment constants into your query/mutation definition files and include them in the `gql` tag using template literal syntax (e.g., `${FRAGMENT_USER_TAX_PROFILE}`). This keeps operation definitions cleaner and promotes reuse.